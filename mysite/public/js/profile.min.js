// تحسين الأداء: تحميل السكربت بعد تحميل DOM باستخدام defer
document.addEventListener('DOMContentLoaded', () => {
    // زر الإعجاب
    const likeButton = document.getElementById("likeButton");
    if (likeButton) {
        likeButton.addEventListener("click", async () => {
            const userId = "<%= user.id %>";
            try {
                const response = await fetch("/profile/like", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ userId: userId }),
                    cache: "no-store" // تحسين الأداء: منع التخزين المؤقت
                });
                const data = await response.json();
                if (data.success) {
                    document.getElementById("like-count").textContent = data.likes;
                    document.getElementById("ranking-count").textContent = data.ranking;
                    likeButton.textContent = data.liked ? "إلغاء الإعجاب" : "إعجاب";
                    likeButton.setAttribute('aria-label', data.liked ? 'إلغاء الإعجاب' : 'إعجاب'); // تحسين الوصولية
                } else {
                    alert("حدث خطأ أثناء التحديث.");
                }
            } catch (error) {
                console.error('Error liking profile:', error);
                alert("حدث خطأ أثناء الاتصال بالخادم.");
            }
        });
    }

    // زر إرسال طلب الصداقة
    const sendRequestButton = document.getElementById("sendRequestButton");
    if (sendRequestButton) {
        sendRequestButton.addEventListener("click", () => handleFriendAction("send_request"));
    }

    // زر إلغاء طلب الصداقة
    const cancelRequestButton = document.getElementById("cancelRequestButton");
    if (cancelRequestButton) {
        cancelRequestButton.addEventListener("click", () => {
            if (confirm("هل أنت متأكد من إلغاء طلب الصداقة؟")) {
                handleFriendAction("cancel_request");
            }
        });
    }

    // وظيفة إدارة طلبات الصداقة
    async function handleFriendAction(action) {
        const friendId = document.querySelector("input[name='friendId']")?.value;
        try {
            const response = await fetch("/friends/action", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ friendId: friendId, action: action }),
                cache: "no-store"
            });
            if (response.ok) {
                location.reload();
            } else {
                alert("حدث خطأ أثناء معالجة الطلب.");
            }
        } catch (error) {
            console.error('Error handling friend action:', error);
            alert("حدث خطأ أثناء الاتصال بالخادم.");
        }
    }

    // زر تعديل الاقتباس
    const editButton = document.getElementById("edit-quote-button");
    const saveButton = document.getElementById("save-quote-button");
    const quoteEditor = document.getElementById("quote-editor");

    if (editButton) {
        editButton.addEventListener("click", () => {
            quoteEditor.removeAttribute("readonly");
            quoteEditor.focus();
            editButton.style.display = "none";
            saveButton.style.display = "inline-block";
        });

        saveButton.addEventListener("click", async () => {
            const newQuote = quoteEditor.value.trim();
            if (!newQuote) {
                alert("لا يمكن ترك الاقتباس فارغًا.");
                return;
            }

            saveButton.disabled = true;
            saveButton.textContent = "جارٍ الحفظ...";

            try {
                const response = await fetch("/profile/update-quote", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ quote: newQuote }),
                    cache: "no-store"
                });
                const result = await response.json();

                if (result.success) {
                    alert("تم تحديث الاقتباس بنجاح.");
                    quoteEditor.setAttribute("readonly", true);
                    editButton.style.display = "inline-block";
                    saveButton.style.display = "none";
                    saveButton.textContent = ""; // إعادة تعيين النص
                } else {
                    alert("حدث خطأ أثناء تحديث الاقتباس.");
                }
            } catch (error) {
                console.error('Error updating quote:', error);
                alert("حدث خطأ في الاتصال بالخادم.");
            } finally {
                saveButton.disabled = false;
            }
        });
    }

    // زر تعديل المعلومات الشخصية
    const editProfileButton = document.getElementById("edit-profile-button");
    if (editProfileButton) {
        editProfileButton.addEventListener("click", () => {
            window.location.href = "/updateProfile";
        });
    }

    // منطق إضافة وحذف عمل تصميم
    const addDesignBtn = document.getElementById("add-design-btn");
    const addDesignForm = document.getElementById("add-design-form");
    const cancelDesignBtn = document.getElementById("cancel-design-btn");
    const designGallery = document.getElementById("design-gallery");

    if (addDesignBtn && addDesignForm) {
        addDesignBtn.addEventListener("click", () => {
            addDesignForm.style.display = "block";
            addDesignBtn.style.display = "none";
            document.getElementById("design-image").focus(); // تحسين الوصولية
        });

        cancelDesignBtn.addEventListener("click", () => {
            addDesignForm.style.display = "none";
            addDesignBtn.style.display = "block";
            addDesignForm.reset();
        });

        addDesignForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            const formData = new FormData(addDesignForm);

            try {
                const response = await fetch("/profile/design/add", {
                    method: "POST",
                    body: formData,
                    cache: "no-store"
                });
                const result = await response.json();

                if (result.success) {
                    const newDesign = result.design;
                    const index = designGallery.querySelectorAll(".content").length;

                    const radio = document.createElement("input");
                    radio.className = "radio";
                    radio.type = "radio";
                    radio.name = "gallery-card";
                    radio.id = `card${index}`;
                    if (index === 0) radio.checked = true;
                    radio.setAttribute('aria-label', `اختر عمل التصميم ${newDesign.title}`);

                    const label = document.createElement("label");
                    label.className = "content";
                    label.htmlFor = `card${index}`;
                    label.innerHTML = `
                        <img src="/uploads/designs/${newDesign.image}" alt="عمل تصميم: ${newDesign.title}" loading="lazy" style="display: none;" />
                        <h3 class="title-card">
                            <span class="marg-bott">${newDesign.title}</span>
                            <span class="subtitle">${newDesign.subtitle || ''}</span>
                        </h3>
                        <form class="delete-form" data-design-id="${newDesign.id}">
                            <button type="submit" class="delete-btn" aria-label="حذف عمل التصميم ${newDesign.title}" onclick="return confirm('هل أنت متأكد من حذف هذا العمل؟');">
                                <i class="fas fa-trash-alt" aria-hidden="true"></i>
                            </button>
                        </form>
                    `;

                    designGallery.appendChild(radio);
                    designGallery.appendChild(label);

                    addDesignForm.reset();
                    addDesignForm.style.display = "none";
                    addDesignBtn.style.display = "block";

                    label.querySelector(".delete-form").addEventListener("submit", handleDeleteDesign);
                } else {
                    alert(result.message || "حدث خطأ أثناء إضافة العمل.");
                }
            } catch (error) {
                console.error("Error adding design:", error);
                alert("حدث خطأ أثناء الاتصال بالخادم.");
            }
        });

        document.querySelectorAll(".delete-form").forEach(form => {
            form.addEventListener("submit", handleDeleteDesign);
        });

        async function handleDeleteDesign(e) {
            e.preventDefault();
            const designId = e.target.getAttribute("data-design-id");

            try {
                const response = await fetch(`/profile/design/delete/${designId}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    cache: "no-store"
                });
                const result = await response.json();

                if (result.success) {
                    const radio = document.getElementById(`card${Array.from(designGallery.querySelectorAll(".content")).indexOf(e.target.closest("label"))}`);
                    const label = e.target.closest("label");
                    designGallery.removeChild(radio);
                    designGallery.removeChild(label);

                    if (!designGallery.querySelector(".content")) {
                        designGallery.innerHTML = '<p style="text-align: center; color: var(--muted-text);">لا توجد أعمال تصميم بعد.</p>';
                    }
                } else {
                    alert(result.message || "حدث خطأ أثناء الحذف.");
                }
            } catch (error) {
                console.error("Error deleting design:", error);
                alert("حدث خطأ أثناء الاتصال بالخادم.");
            }
        }
    }
});